<?php
/**
 * Description of JasperResourceDescriptor
 *
 * @author Daniel Wendler
 */
namespace Jasper;


class JasperResourceDescriptor {
    private $name;
    private $wsType;
    private $uriString;
    private $isNew;
    private $label;
    private $description;
    private $creationDate;
    private $propResourceType;
    private $propParentFolder;
    private $propReferenceUri;
    private $propAttachementId;
    private $propIsReference;
    private $propHasData;
    private $propVersion;
    private $propRuAlwaysPropmtControls;
    private $propRuReportRenderingView;
    private $propRuInputcontrolRenderingView;
    private $propRuControlsLayout;
    private $propRuIsMainReport;
    private $propSecurityPermissionMask;
    private $propDatasourceDriverClass;
    private $propDatasourceUsername;
    private $propDataSourcePassword;
    private $propDatasourceConnectionUrl;
    private $propDatatypeType;
    private $propDatatypePattern;
    private $propDatatypeStrictMax;
    private $propDatatypeStrictMin;
    private $propDatatypeMin;
    private $propDatatypeMax;

    private $propInputControlIsMandatory;
    private $propInputControlIsReadonly;
    private $propInputControlIsVisible;
    private $propInputControlType;

    private $childResources = array();


    public function __construct($uriString = null) {
        $tmp = explode('/', JasperHelper::url('/' . $uriString));
        $name = $tmp[(sizeof($tmp) - 1)];
        unset($tmp[(sizeof($tmp) - 1)]);
        $parent = JasperHelper::url(implode('/', $tmp));

        // Some default properties for all resourceDescriptors
        $this->setName($name)
             ->setLabel($name)
             ->setDescription($name . ' generated by Jasper.php through REST ' . date('r'))
             ->setIsNew('true')
             ->setPropParentFolder($parent)
             ->setUriString(JasperHelper::url($parent . '/' . $name))
             ->setPropIsReference('false');
    }


    public function buildXml() {
        $xml = new JasperSimpleXml("<resourceDescriptor></resourceDescriptor>");
        if (!empty($this->name)) {
            $xml->addAttribute('name', $this->name);
        }
        if (!empty($this->uriString)) {
            $xml->addAttribute('uriString', $this->uriString);
        }
        if (!empty($this->isNew)) {
            $xml->addAttribute('isNew', $this->isNew);
        }
        if (!empty($this->wsType)) {
            $xml->addAttribute('wsType', $this->wsType);
        }

        $xml->addChild('label')->addCData($this->label);
        $xml->addChild('description')->addCData($this->description);

        if (!empty($this->propParentFolder)) {
            $propParentFolder = $xml->addChild('resourceProperty');
            $propParentFolder->addAttribute('name', 'PROP_PARENT_FOLDER');
            $propParentFolder->addChild('value')->addCData($this->propParentFolder);
        }
        
        if (!empty($this->propAttachementId)) {
            $propAttachementId = $xml->addChild('resourceProperty');
            $propAttachementId->addAttribute('name', 'PROP_ATTACHEMENT_ID');
            $propAttachementId->addChild('value')->addCData($this->propAttachementId);
        }
        
        if (!empty($this->propHasData)) {
            $propHasData = $xml->addChild('resourceProperty');
            $propHasData->addAttribute('name', 'PROP_HAS_DATA');
            $propHasData->addChild('value')->addCData($this->propHasData);
        }
        
        if (!empty($this->propIsReference)) {
            $propIsReference = $xml->addChild('resourceProperty');
            $propIsReference->addAttribute('name', 'PROP_IS_REFERENCE');
            $propIsReference->addChild('value')->addCData($this->propIsReference);
        }
        
        if (!empty($this->propReferenceUri)) {
            $propReferenceUri = $xml->addChild('resourceProperty');
            $propReferenceUri->addAttribute('name', 'PROP_REFERENCE_URI');
            $propReferenceUri->addChild('value')->addCData($this->propReferenceUri);
        }
        
        if (!empty($this->propResourceType)) {
            $propResourceType = $xml->addChild('resourceProperty');
            $propResourceType->addAttribute('name', 'PROP_RESOURCE_TYPE');
            $propResourceType->addChild('value')->addCData($this->propResourceType);
        }
        
        if (!empty($this->propRuAlwaysPropmtControls)) {
            $propRuAlwaysPropmtControls = $xml->addChild('resourceProperty');
            $propRuAlwaysPropmtControls->addAttribute('name', 'PROP_RU_ALWAYS_PROPMT_CONTROLS');
            $propRuAlwaysPropmtControls->addChild('value')->addCData($this->propRuAlwaysPropmtControls);
        }

        if (!empty($this->propRuReportRenderingView)) {
            $propRuReportRenderingView = $xml->addChild('resourceProperty');
            $propRuReportRenderingView->addAttribute('name', 'PROP_RU_REPORT_RENDERING_VIEW');
            $propRuReportRenderingView->addChild('value')->addCData($this->propRuReportRenderingView);
        }

        if (!empty($this->propRuInputcontrolRenderingView)) {
            $propRuInputcontrolRenderingView = $xml->addChild('resourceProperty');
            $propRuInputcontrolRenderingView->addAttribute('name', 'PROP_RU_INPUTCONTROL_RENDERING_VIEW');
            $propRuInputcontrolRenderingView->addChild('value')->addCData($this->propRuInputcontrolRenderingView);
        }

        if (!empty($this->propRuControlsLayout)) {
            $propRuControlsLayout = $xml->addChild('resourceProperty');
            $propRuControlsLayout->addAttribute('name', 'PROP_RU_CONTROLS_LAYOUT');
            $propRuControlsLayout->addChild('value')->addCData($this->propRuControlsLayout);
        }
        
        if (!empty($this->propVersion)) {
            $propVersion = $xml->addChild('resourceProperty');
            $propVersion->addAttribute('name', 'PROP_VERSION');
            $propVersion->addChild('value')->addCData($this->propVersion);
        }

        if (!empty($this->propSecurityPermissionMask)) {
            $propSecurityPermissionMask = $xml->addChild('resourceProperty');
            $propSecurityPermissionMask->addAttribute('name', 'PROP_SECURITY_PERMISSION_MASK');
            $propSecurityPermissionMask->addChild('value')->addCData($this->propSecurityPermissionMask);
        }

        if (!empty($this->propRuIsMainReport)) {
            $propRuIsMainReport = $xml->addChild('resourceProperty');
            $propRuIsMainReport->addAttribute('name', 'PROP_RU_IS_MAIN_REPORT');
            $propRuIsMainReport->addChild('value')->addCData($this->propRuIsMainReport);
        }


        if (!empty($this->propDatasourceDriverClass)) {
            $propDatasourceDriverClass = $xml->addChild('resourceProperty');
            $propDatasourceDriverClass->addAttribute('name', 'PROP_DATASOURCE_DRIVER_CLASS');
            $propDatasourceDriverClass->addChild('value')->addCData($this->propDatasourceDriverClass);
        }

        if (!empty($this->propDatasourceUsername)) {
            $propDatasourceUsername = $xml->addChild('resourceProperty');
            $propDatasourceUsername->addAttribute('name', 'PROP_DATASOURCE_USERNAME');
            $propDatasourceUsername->addChild('value')->addCData($this->propDatasourceUsername);
        }

        if (!empty($this->propDatasourcePassword)) {
            $propDatasourcePassword = $xml->addChild('resourceProperty');
            $propDatasourcePassword->addAttribute('name', 'PROP_DATASOURCE_PASSWORD');
            $propDatasourcePassword->addChild('value')->addCData($this->propDatasourcePassword);
        }

        if (!empty($this->propDatasourceConnectionUrl)) {
            $propDatasourceConnectionUrl = $xml->addChild('resourceProperty');
            $propDatasourceConnectionUrl->addAttribute('name', 'PROP_DATASOURCE_CONNECTION_URL');
            $propDatasourceConnectionUrl->addChild('value')->addCData($this->propDatasourceConnectionUrl);
        }

        if (!empty($this->propDatatypeType)) {
            $propDatatypeType = $xml->addChild('resourceProperty');
            $propDatatypeType->addAttribute('name', 'PROP_DATATYPE_TYPE');
            $propDatatypeType->addChild('value')->addCData($this->propDatatypeType);
        }

        if (!empty($this->propDatatypePattern)) {
            $propDatatypePattern = $xml->addChild('resourceProperty');
            $propDatatypePattern->addAttribute('name', 'PROP_DATATYPE_PATTERN');
            $propDatatypePattern->addChild('value')->addCData($this->propDatatypePattern);
        }

        if (!empty($this->propDatatypeMax)) {
            $propDatatypeMax = $xml->addChild('resourceProperty');
            $propDatatypeMax->addAttribute('name', 'PROP_DATATYPE_MAX_VALUE');
            $propDatatypeMax->addChild('value')->addCData($this->propDatatypeMax);
        }

        if (!empty($this->propDatatypeMin)) {
            $propDatatypeMin = $xml->addChild('resourceProperty');
            $propDatatypeMin->addAttribute('name', 'PROP_DATATYPE_MIN_VALUE');
            $propDatatypeMin->addChild('value')->addCData($this->propDatatypeMin);
        }

        if (!empty($this->propDatatypeStrictMax)) {
            $propDatatypeStrictMax = $xml->addChild('resourceProperty');
            $propDatatypeStrictMax->addAttribute('name', 'PROP_DATATYPE_STRICT_MAX');
            $propDatatypeStrictMax->addChild('value')->addCData($this->propDatatypeStrictMax);
        }

        if (!empty($this->propDatatypeStrictMin)) {
            $propDatatypeStrictMin = $xml->addChild('resourceProperty');
            $propDatatypeStrictMin->addAttribute('name', 'PROP_DATATYPE_STRICT_MIN');
            $propDatatypeStrictMin->addChild('value')->addCData($this->propDatatypeStrictMin);
        }

        if (!empty($this->propInputControlIsMandatory)) {
            $propInputControlIsMandatory = $xml->addChild('resourceProperty');
            $propInputControlIsMandatory->addAttribute('name', 'PROP_INPUTCONTROL_IS_MANDATORY');
            $propInputControlIsMandatory->addChild('value')->addCData($this->propInputControlIsMandatory);
        }

        if (!empty($this->propInputControlIsReadonly)) {
            $propInputControlIsReadonly = $xml->addChild('resourceProperty');
            $propInputControlIsReadonly->addAttribute('name', 'PROP_INPUTCONTROL_IS_READONLY');
            $propInputControlIsReadonly->addChild('value')->addCData($this->propInputControlIsReadonly);
        }

        if (!empty($this->propInputControlIsVisible)) {
            $propInputControlIsVisible = $xml->addChild('resourceProperty');
            $propInputControlIsVisible->addAttribute('name', 'PROP_INPUTCONTROL_IS_VISIBLE');
            $propInputControlIsVisible->addChild('value')->addCData($this->propInputControlIsVisible);
        }

        if (!empty($this->propInputControlType)) {
            $propInputControlType = $xml->addChild('resourceProperty');
            $propInputControlType->addAttribute('name', 'PROP_INPUTCONTROL_TYPE');
            $propInputControlType->addChild('value')->addCData($this->propInputControlType);
        }

        // A resourceDescriptor can contain child resourceDescriptors
        foreach ($this->childResources as $childResource) {
            $xml->addXmlObject($childResource->buildXml());
        }

        return $xml;
    }


    public function toXml($pretty = false) {
        return $this->buildXml()->saveXml($pretty);
    }


    public function fromXml(\SimpleXMLElement $resource) {
        $this->setName((string)$resource['name'])
                   ->setUriString((string)$resource['uriString'])
                   ->setLabel((string)$resource->label)
                   ->setWsType((string)$resource['wsType'])
                   ->setDescription((string)$resource->description)
                   ->setIsNew((string)$resource['isNew'])
                   ->setCreationDate((string)$resource->creationDate);

        // Calling setter for each resourceProperty
        foreach ($resource->resourceProperty as $property) {
            // PROP_XXX_AAA to propXxxAaa
            $member = lcfirst(implode(array_map('ucfirst', explode('_', strtolower((string)$property['name'])))));
            if (method_exists($this, 'set' . ucfirst($member))) {
                // propXxxAaa to setPropXxxAaa
                call_user_func(array($this, 'set' . ucfirst($member)), (string)$property->value);
            }
        }

        // Creating new child resourceDescriptors
        foreach ($resource->resourceDescriptor as $childResource) {
            $resourceDescriptor = new JasperResourceDescriptor();
            $resourceDescriptor->fromXml($childResource);
            $this->addChildResource($resourceDescriptor);
        }

        return $this;
    }


    public function getChildResources() {
        return $this->childResources;
    }


    public function addChildResource(JasperResourceDescriptor $resource) {
        // Some resources have to be references to themselves,
        // when added as a child resource.
        if ($resource->getWsType() == 'jrxml') {
            $resource->setPropIsReference('true');
            $resource->setPropReferenceUri($resource->getUriString());
        }
        $this->childResources[] = $resource;
        return $this;
    }


    public function removeChildResource(JasperResourceDescriptor $resource) {
        foreach ($this->childResources as $key => $childResource) {
            if ($childResource->getUriString() == $resource->getUriString()) {
                unset($this->childResources[$key]);
            }
        }
        return $this;
    }


    public function getName() {
        return $this->name;
    }

    public function setName($name) {
        $this->name = $name;
        return $this;
    }

    public function getWsType() {
        return $this->wsType;
    }

    public function setWsType($wsType) {
        $this->wsType = $wsType;
        return $this;
    }

    public function getUriString() {
        return $this->uriString;
    }

    public function setUriString($uriString) {
        $tmp = explode('/', JasperHelper::url('/' . $uriString));
        $name = $tmp[(sizeof($tmp) - 1)];
        unset($tmp[(sizeof($tmp) - 1)]);
        $parent = JasperHelper::url(implode('/', $tmp));

        if (empty($this->propParentFolder)) {
            $this->setPropParentFolder($parent);
        }

        if (empty($this->name)) {
            $this->setName($name);
        }

        $this->uriString = $uriString;
        return $this;
    }

    public function getIsNew() {
        return $this->isNew;
    }

    public function setIsNew($isNew) {
        if ($isNew === true) {
            $isNew = 'true';
        }
        if ($isNew === false) {
            $isNew = 'false';
        }
        $this->isNew = $isNew;
        return $this;
    }

    public function getLabel() {
        return $this->label;
    }

    public function setLabel($label) {
        $this->label = $label;
        return $this;
    }

    public function getDescription() {
        return $this->description;
    }

    public function setDescription($description) {
        $this->description = $description;
        return $this;
    }

    public function getPropResourceType() {
        return $this->propResourceType;
    }

    public function setPropResourceType($propResourceType) {
        $this->propResourceType = $propResourceType;
        return $this;
    }

    public function getPropParentFolder() {
        return $this->propParentFolder;
    }

    public function setPropParentFolder($propParentFolder) {
        $this->propParentFolder = $propParentFolder;
        return $this;
    }

    public function getPropReferenceUri() {
        return $this->propReferenceUri;
    }

    public function setPropReferenceUri($propReferenceUri) {
        $this->propReferenceUri = $propReferenceUri;
        return $this;
    }

    public function getPropAttachementId() {
        return $this->propAttachementId;
    }

    public function setPropAttachementId($propAttachementId) {
        $this->propAttachementId = $propAttachementId;
        return $this;
    }

    public function getPropIsReference() {
        return $this->propIsReference;
    }

    public function setPropIsReference($propIsReference) {
        $this->propIsReference = $propIsReference;
        return $this;
    }

    public function getPropHasData() {
        return $this->propHasData;
    }

    public function setPropHasData($propHasData) {
        $this->propHasData = $propHasData;
        return $this;
    }

    public function getPropVersion() {
        return $this->propVersion;
    }

    public function setPropVersion($propVersion) {
        $this->propVersion = $propVersion;
        return $this;
    }

    public function getPropRuAlwaysPropmtControls() {
        return $this->propRuAlwaysPropmtControls;
    }

    public function setPropRuAlwaysPropmtControls($propRuAlwaysPropmtControls) {
        $this->propRuAlwaysPropmtControls = $propRuAlwaysPropmtControls;
        return $this;
    }

    public function getPropRuControlsLayout() {
        return $this->propRuControlsLayout;
    }

    public function setPropRuControlsLayout($propRuControlsLayout) {
        $this->propRuControlsLayout = $propRuControlsLayout;
        return $this;
    }

    public function getPropSecurityPermissionMask() {
        return $this->propSecurityPermissionMask;
    }
    
    public function setPropSecurityPermissionMask($propSecurityPermissionMask) {
        $this->propSecurityPermissionMask = $propSecurityPermissionMask;
        return $this;
    }

    public function getPropRuReportRenderingView() {
        return $this->propRuReportRenderingView;
    }

    public function setPropRuReportRenderingView($propRuReportRenderingView) {
        $this->propRuReportRenderingView = $propRuReportRenderingView;
        return $this;
    }

    public function getPropRuInputcontrolRenderingView() {
        return $this->propRuInputcontrolRenderingView;
    }

    public function setPropRuInputcontrolRenderingView($propRuInputcontrolRenderingView) {
        $this->propRuInputcontrolRenderingView = $propRuInputcontrolRenderingView;
        return $this;
    }

    public function getPropRuIsMainReport() {
        return $this->propRuIsMainReport;
    }

    public function setPropRuIsMainReport($propRuIsMainReport) {
        $this->propRuIsMainReport = $propRuIsMainReport;
        return $this;
    }

    public function getPropDatasourceDriverClass() {
        return $this->propDatasourceDriverClass;
    }

    public function setPropDatasourceDriverClass($propDatasourceDriverClass) {
        $this->propDatasourceDriverClass = $propDatasourceDriverClass;
        return $this;
    }

    public function getPropDatasourceUsername() {
        return $this->propDatasourceUsername;
    }

    public function setPropDatasourceUsername($propDatasourceUsername) {
        $this->propDatasourceUsername = $propDatasourceUsername;
        return $this;
    }

    public function getPropDataSourcePassword() {
        return $this->propDataSourcePassword;
    }

    public function setPropDataSourcePassword($propDataSourcePassword) {
        $this->propDataSourcePassword = $propDataSourcePassword;
        return $this;
    }

    public function getPropDatasourceConnectionUrl() {
        return $this->propDatasourceConnectionUrl;
    }

    public function getPropDatatypeType() {
        return $this->propDatatypeType;
    }

    public function getPropDatatypeStrictMax() {
        return $this->propDatatypeStrictMax;
    }

    public function getPropDatatypePattern() {
        return $this->propDatatypePattern;
    }

    public function getPropDatatypeStrictMin() {
        return $this->propDatatypeStrictMin;
    }

    public function setPropDatatypePattern($PropDatatypePattern) {
        $this->propDatatypePattern = $PropDatatypePattern;
        return $this;
    }

    public function setPropDatatypeStrictMax($PropDatatypeStrictMax) {
        $this->propDatatypeStrictMax = $PropDatatypeStrictMax;
        return $this;
    }

    public function setPropDatatypeStrictMin($PropDatatypeStrictMin) {
        $this->propDatatypeStrictMin = $PropDatatypeStrictMin;
        return $this;
    }

    public function setPropDatatypeMinValue($PropDatatypeMin) {
        $this->propDatatypeMin = $PropDatatypeMin;
        return $this;
    }

    public function setPropDatatypeMaxValue($PropDatatypeMax) {
        $this->propDatatypeMax = $PropDatatypeMax;
        return $this;
    }

    public function setPropDatatypeType($PropDatatypeType) {
        $this->propDatatypeType = $PropDatatypeType;
        return $this;
    }

    public function setPropDatasourceConnectionUrl($propDatasourceConnectionUrl) {
        $this->propDatasourceConnectionUrl = $propDatasourceConnectionUrl;
        return $this;
    }

    public function setPropInputControlIsMandatory($propInputControlIsMandatory) {
        $this->propInputControlIsMandatory = $propInputControlIsMandatory;
        return $this;
    }

    public function setPropInputControlIsReadonly($propInputControlIsReadonly) {
        $this->propInputControlIsReadonly = $propInputControlIsReadonly;
        return $this;
    }

    public function setPropInputControlIsIsVisible($propInputControlIsVisible) {
        $this->propInputControlIsVisible = $propInputControlIsVisible;
        return $this;
    }

    public function setPropInputControlType($propInputControlType) {
        $this->propInputControlType = $propInputControlType;
        return $this;
    }

    public function getCreationDate() {
        return $this->creationDate;
    }
    
    public function setCreationDate($creationDate) {
        $this->creationDate = $creationDate;
        return $this;
    }

    public function getXml($pretty = false) {
        return $this->toXml($pretty);
    }
}